/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   op_sti.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jochang <marvin@42.fr>                     +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2018/09/24 02:00:55 by jochang           #+#    #+#             */
/*   Updated: 2019/05/04 00:33:31 by jtashako         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../inc/corewar.h"

void	op_sti(t_cycle *info, t_pc *pc)
{
	int16_t		loc;
	int16_t		tmp;
	uint8_t		acb;

	TEA;
	acb = info->mem[0][MEM(pc->i + 1)].byte;
	if (!REG(info->mem[0][MEM(pc->i + 2)].byte))
	{
	//	pc->i = MEM(pc->i + 1);
		pc->i = MEM(pc->i + acb_len(acb, 1));
		return ;
	}
//	acb = info->mem[0][MEM(pc->i + 1)].byte;
//memren -> cpy into loc/tmp starting at back of mem
	loc = 0;
	tmp = 0;
	/*
	int16_t idx1, idx2; idx1 = idx2 = 0;
	int r2 = 0;
	if (((acb << 2) >> 6) == 1) //2nd arg is register
	{
		idx1 = pc->r[info->mem[0][MEM(pc->i + 3)].byte];
		r2 = 1;
	}
	else if (((acb << 2) >> 6) == 2) //2nd arg is direct addr (use next 2 bytes)
		idx1 = info->mem[0][MEM(pc->i + 3)].byte * 16 + info->mem[0][MEM(pc->i + 4)].byte;
	else
	{
		pc->i = MEM(pc->i + acb_len(acb, 1));
		return ;
	}

	if (((acb )))
	//idx1 = MEM(idx1);	
	if (((acb << 4) >> 6) == 1) //3rd arg is register
	{
		if (r2) //2nd arg was 1 byte
			idx2 = pc->r[info->mem[0][MEM(pc->i + 4)].byte];
		else //2nd arg was 2 bytes
			idx2 = pc->r[info->mem[0][MEM(pc->i + 5)].byte];
	}
	else if (((acb << 4) >> 6) == 2) //3rd arg is register
	{
		if (r2) //2nd arg was 1 byte
			idx2 = info->mem[0][MEM(pc->i + 4)].byte * 16 + info->mem[0][MEM(pc->i + 5)].byte;
		else //2nd arg was 2 bytes
			idx2 = info->mem[0][MEM(pc->i + 5)].byte * 16 + info->mem[0][MEM(pc->i + 6)].byte;
	}
	else
	{
		pc->i = MEM(pc->i + acb_len(acb, 1));
		return ;
	}
	
	//idx2 = MEM(idx2);
	loc = MEM(idx1 + idx2);
	//cw_memwen(&info->mem[0][MEM(pc->i + IDX((int16_t)loc))], &pc->r[info->mem[0][MEM(pc->i + 2)].byte], REG_SIZE, pc->r[0]);
	cw_memwen(&info->mem[0][MEM(pc->i + IDX((int16_t)loc))], &pc->r[info->mem[0][MEM(pc->i + 2)].byte], IND_SIZE, pc->r[0]);
	*/
	if ((acb >> 4) == 5 && REG(info->mem[0][MEM(pc->i + 3)].byte)) //
		;//loc += pc->r[info->mem[0][MEM(pc->i + 3)].byte];
	//else if ((acb >> 4) == 7 || (acb >> 4) == 6)
	else if ((acb >> 4) == 6)
		cw_memren(&loc, &info->mem[0][MEM(pc->i + 3)], IND_SIZE); 
	else
	{
		pc->i = MEM(pc->i + acb_len(acb, 1));
		//pc->i = MEM(pc->i + 1);
		return ;
	}
	//3rd arg is register && its byte value is REG
	if ((acb & 0x0f) == 4 && REG(info->mem[0][MEM(pc->i + 3 + ACB_ARG_1((acb >> 4) & 3))].byte))
		loc += pc->r[info->mem[0][MEM(pc->i + 3 + ACB_ARG_1((acb >> 4) & 3))].byte];
	else if ((acb & 0x0f) == 8)
		;//cw_memren(&tmp, &info->mem[0][MEM(pc->i + 3 + ACB_ARG_1((acb >> 4) & 3))], IND_SIZE);
	else
	{
		//pc->i = MEM(pc->i + 1);
		pc->i = MEM(pc->i + acb_len(acb, 1));
		return ;
	}
	loc += tmp;
	cw_memwen(&info->mem[0][MEM(pc->i + IDX((int16_t)loc))], &pc->r[info->mem[0][MEM(pc->i + 2)].byte], REG_SIZE, pc->r[0]);
	 //CHECK IF STORING IN PROPER REG
	pc->i = MEM(pc->i + acb_len(acb, 1));
	//pc->i += acb_len(acb, 1);
	TIME("op_sti\t");
}
